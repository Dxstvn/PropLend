/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  
export declare namespace ISecondaryMarket {
      
    export type OrderStruct = {trader: AddressLike, orderType: BigNumberish, isSenior: boolean, amount: BigNumberish, price: BigNumberish, timestamp: BigNumberish, isActive: boolean}

    export type OrderStructOutput = [trader: string, orderType: bigint, isSenior: boolean, amount: bigint, price: bigint, timestamp: bigint, isActive: boolean] & {trader: string, orderType: bigint, isSenior: boolean, amount: bigint, price: bigint, timestamp: bigint, isActive: boolean }
  
    }

  export interface ISecondaryMarketInterface extends Interface {
    getFunction(nameOrSignature: "cancelOrder" | "createOrder" | "fillOrder" | "getActiveOrders" | "getOrder" | "getUserOrders"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "OrderCancelled" | "OrderCreated" | "OrderFilled"): EventFragment;

    encodeFunctionData(functionFragment: 'cancelOrder', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'createOrder', values: [BigNumberish, boolean, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'fillOrder', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'getActiveOrders', values: [boolean]): string;
encodeFunctionData(functionFragment: 'getOrder', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getUserOrders', values: [AddressLike]): string;

    decodeFunctionResult(functionFragment: 'cancelOrder', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createOrder', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'fillOrder', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getActiveOrders', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getOrder', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getUserOrders', data: BytesLike): Result;
  }

  
    export namespace OrderCancelledEvent {
      export type InputTuple = [orderId: BigNumberish];
      export type OutputTuple = [orderId: bigint];
      export interface OutputObject {orderId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OrderCreatedEvent {
      export type InputTuple = [orderId: BigNumberish, trader: AddressLike, orderType: BigNumberish, isSenior: boolean, amount: BigNumberish, price: BigNumberish];
      export type OutputTuple = [orderId: bigint, trader: string, orderType: bigint, isSenior: boolean, amount: bigint, price: bigint];
      export interface OutputObject {orderId: bigint, trader: string, orderType: bigint, isSenior: boolean, amount: bigint, price: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OrderFilledEvent {
      export type InputTuple = [orderId: BigNumberish, buyer: AddressLike, seller: AddressLike, amount: BigNumberish, price: BigNumberish];
      export type OutputTuple = [orderId: bigint, buyer: string, seller: string, amount: bigint, price: bigint];
      export interface OutputObject {orderId: bigint, buyer: string, seller: string, amount: bigint, price: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface ISecondaryMarket extends BaseContract {
    
    connect(runner?: ContractRunner | null): ISecondaryMarket;
    waitForDeployment(): Promise<this>;

    interface: ISecondaryMarketInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    cancelOrder: TypedContractMethod<
      [orderId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    createOrder: TypedContractMethod<
      [orderType: BigNumberish, isSenior: boolean, amount: BigNumberish, price: BigNumberish, ],
      [bigint],
      'nonpayable'
    >
    

    
    fillOrder: TypedContractMethod<
      [orderId: BigNumberish, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    getActiveOrders: TypedContractMethod<
      [isSenior: boolean, ],
      [ISecondaryMarket.OrderStructOutput[]],
      'view'
    >
    

    
    getOrder: TypedContractMethod<
      [orderId: BigNumberish, ],
      [ISecondaryMarket.OrderStructOutput],
      'view'
    >
    

    
    getUserOrders: TypedContractMethod<
      [user: AddressLike, ],
      [ISecondaryMarket.OrderStructOutput[]],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'cancelOrder'): TypedContractMethod<
      [orderId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'createOrder'): TypedContractMethod<
      [orderType: BigNumberish, isSenior: boolean, amount: BigNumberish, price: BigNumberish, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'fillOrder'): TypedContractMethod<
      [orderId: BigNumberish, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getActiveOrders'): TypedContractMethod<
      [isSenior: boolean, ],
      [ISecondaryMarket.OrderStructOutput[]],
      'view'
    >;
getFunction(nameOrSignature: 'getOrder'): TypedContractMethod<
      [orderId: BigNumberish, ],
      [ISecondaryMarket.OrderStructOutput],
      'view'
    >;
getFunction(nameOrSignature: 'getUserOrders'): TypedContractMethod<
      [user: AddressLike, ],
      [ISecondaryMarket.OrderStructOutput[]],
      'view'
    >;

    getEvent(key: 'OrderCancelled'): TypedContractEvent<OrderCancelledEvent.InputTuple, OrderCancelledEvent.OutputTuple, OrderCancelledEvent.OutputObject>;
getEvent(key: 'OrderCreated'): TypedContractEvent<OrderCreatedEvent.InputTuple, OrderCreatedEvent.OutputTuple, OrderCreatedEvent.OutputObject>;
getEvent(key: 'OrderFilled'): TypedContractEvent<OrderFilledEvent.InputTuple, OrderFilledEvent.OutputTuple, OrderFilledEvent.OutputObject>;

    filters: {
      
      'OrderCancelled(uint256)': TypedContractEvent<OrderCancelledEvent.InputTuple, OrderCancelledEvent.OutputTuple, OrderCancelledEvent.OutputObject>;
      OrderCancelled: TypedContractEvent<OrderCancelledEvent.InputTuple, OrderCancelledEvent.OutputTuple, OrderCancelledEvent.OutputObject>;
    

      'OrderCreated(uint256,address,uint8,bool,uint256,uint256)': TypedContractEvent<OrderCreatedEvent.InputTuple, OrderCreatedEvent.OutputTuple, OrderCreatedEvent.OutputObject>;
      OrderCreated: TypedContractEvent<OrderCreatedEvent.InputTuple, OrderCreatedEvent.OutputTuple, OrderCreatedEvent.OutputObject>;
    

      'OrderFilled(uint256,address,address,uint256,uint256)': TypedContractEvent<OrderFilledEvent.InputTuple, OrderFilledEvent.OutputTuple, OrderFilledEvent.OutputObject>;
      OrderFilled: TypedContractEvent<OrderFilledEvent.InputTuple, OrderFilledEvent.OutputTuple, OrderFilledEvent.OutputObject>;
    
    };
  }