/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  
export declare namespace ILendingPool {
      
    export type LoanStruct = {borrower: AddressLike, amount: BigNumberish, interestRate: BigNumberish, ltv: BigNumberish, startTime: BigNumberish, endTime: BigNumberish, propertyValue: BigNumberish, propertyId: BytesLike, status: BigNumberish}

    export type LoanStructOutput = [borrower: string, amount: bigint, interestRate: bigint, ltv: bigint, startTime: bigint, endTime: bigint, propertyValue: bigint, propertyId: string, status: bigint] & {borrower: string, amount: bigint, interestRate: bigint, ltv: bigint, startTime: bigint, endTime: bigint, propertyValue: bigint, propertyId: string, status: bigint }
  
    }

  export interface ILendingPoolInterface extends Interface {
    getFunction(nameOrSignature: "applyForLoan" | "deposit" | "getJuniorTVL" | "getLoan" | "getSeniorTVL" | "getTotalValue" | "getTrancheRatio" | "getUserBalance" | "liquidateLoan" | "repayLoan" | "withdraw"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "Deposited" | "InterestDistributed" | "LoanDefaulted" | "LoanOriginated" | "LoanRepaid" | "Withdrawn"): EventFragment;

    encodeFunctionData(functionFragment: 'applyForLoan', values: [BigNumberish, BytesLike, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish, boolean]): string;
encodeFunctionData(functionFragment: 'getJuniorTVL', values?: undefined): string;
encodeFunctionData(functionFragment: 'getLoan', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getSeniorTVL', values?: undefined): string;
encodeFunctionData(functionFragment: 'getTotalValue', values?: undefined): string;
encodeFunctionData(functionFragment: 'getTrancheRatio', values?: undefined): string;
encodeFunctionData(functionFragment: 'getUserBalance', values: [AddressLike, boolean]): string;
encodeFunctionData(functionFragment: 'liquidateLoan', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'repayLoan', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish, boolean]): string;

    decodeFunctionResult(functionFragment: 'applyForLoan', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getJuniorTVL', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getLoan', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getSeniorTVL', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getTotalValue', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getTrancheRatio', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getUserBalance', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'liquidateLoan', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'repayLoan', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  }

  
    export namespace DepositedEvent {
      export type InputTuple = [user: AddressLike, amount: BigNumberish, isSenior: boolean, shares: BigNumberish];
      export type OutputTuple = [user: string, amount: bigint, isSenior: boolean, shares: bigint];
      export interface OutputObject {user: string, amount: bigint, isSenior: boolean, shares: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace InterestDistributedEvent {
      export type InputTuple = [seniorAmount: BigNumberish, juniorAmount: BigNumberish];
      export type OutputTuple = [seniorAmount: bigint, juniorAmount: bigint];
      export interface OutputObject {seniorAmount: bigint, juniorAmount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace LoanDefaultedEvent {
      export type InputTuple = [loanId: BigNumberish];
      export type OutputTuple = [loanId: bigint];
      export interface OutputObject {loanId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace LoanOriginatedEvent {
      export type InputTuple = [loanId: BigNumberish, borrower: AddressLike, amount: BigNumberish, interestRate: BigNumberish];
      export type OutputTuple = [loanId: bigint, borrower: string, amount: bigint, interestRate: bigint];
      export interface OutputObject {loanId: bigint, borrower: string, amount: bigint, interestRate: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace LoanRepaidEvent {
      export type InputTuple = [loanId: BigNumberish, amount: BigNumberish];
      export type OutputTuple = [loanId: bigint, amount: bigint];
      export interface OutputObject {loanId: bigint, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace WithdrawnEvent {
      export type InputTuple = [user: AddressLike, amount: BigNumberish, isSenior: boolean, shares: BigNumberish];
      export type OutputTuple = [user: string, amount: bigint, isSenior: boolean, shares: bigint];
      export interface OutputObject {user: string, amount: bigint, isSenior: boolean, shares: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface ILendingPool extends BaseContract {
    
    connect(runner?: ContractRunner | null): ILendingPool;
    waitForDeployment(): Promise<this>;

    interface: ILendingPoolInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    applyForLoan: TypedContractMethod<
      [amount: BigNumberish, propertyId: BytesLike, propertyValue: BigNumberish, term: BigNumberish, ],
      [bigint],
      'nonpayable'
    >
    

    
    deposit: TypedContractMethod<
      [amount: BigNumberish, isSenior: boolean, ],
      [bigint],
      'nonpayable'
    >
    

    
    getJuniorTVL: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getLoan: TypedContractMethod<
      [loanId: BigNumberish, ],
      [ILendingPool.LoanStructOutput],
      'view'
    >
    

    
    getSeniorTVL: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getTotalValue: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getTrancheRatio: TypedContractMethod<
      [],
      [[bigint, bigint]],
      'view'
    >
    

    
    getUserBalance: TypedContractMethod<
      [user: AddressLike, isSenior: boolean, ],
      [bigint],
      'view'
    >
    

    
    liquidateLoan: TypedContractMethod<
      [loanId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    repayLoan: TypedContractMethod<
      [loanId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    withdraw: TypedContractMethod<
      [shares: BigNumberish, isSenior: boolean, ],
      [bigint],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'applyForLoan'): TypedContractMethod<
      [amount: BigNumberish, propertyId: BytesLike, propertyValue: BigNumberish, term: BigNumberish, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'deposit'): TypedContractMethod<
      [amount: BigNumberish, isSenior: boolean, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getJuniorTVL'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getLoan'): TypedContractMethod<
      [loanId: BigNumberish, ],
      [ILendingPool.LoanStructOutput],
      'view'
    >;
getFunction(nameOrSignature: 'getSeniorTVL'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getTotalValue'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getTrancheRatio'): TypedContractMethod<
      [],
      [[bigint, bigint]],
      'view'
    >;
getFunction(nameOrSignature: 'getUserBalance'): TypedContractMethod<
      [user: AddressLike, isSenior: boolean, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'liquidateLoan'): TypedContractMethod<
      [loanId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'repayLoan'): TypedContractMethod<
      [loanId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdraw'): TypedContractMethod<
      [shares: BigNumberish, isSenior: boolean, ],
      [bigint],
      'nonpayable'
    >;

    getEvent(key: 'Deposited'): TypedContractEvent<DepositedEvent.InputTuple, DepositedEvent.OutputTuple, DepositedEvent.OutputObject>;
getEvent(key: 'InterestDistributed'): TypedContractEvent<InterestDistributedEvent.InputTuple, InterestDistributedEvent.OutputTuple, InterestDistributedEvent.OutputObject>;
getEvent(key: 'LoanDefaulted'): TypedContractEvent<LoanDefaultedEvent.InputTuple, LoanDefaultedEvent.OutputTuple, LoanDefaultedEvent.OutputObject>;
getEvent(key: 'LoanOriginated'): TypedContractEvent<LoanOriginatedEvent.InputTuple, LoanOriginatedEvent.OutputTuple, LoanOriginatedEvent.OutputObject>;
getEvent(key: 'LoanRepaid'): TypedContractEvent<LoanRepaidEvent.InputTuple, LoanRepaidEvent.OutputTuple, LoanRepaidEvent.OutputObject>;
getEvent(key: 'Withdrawn'): TypedContractEvent<WithdrawnEvent.InputTuple, WithdrawnEvent.OutputTuple, WithdrawnEvent.OutputObject>;

    filters: {
      
      'Deposited(address,uint256,bool,uint256)': TypedContractEvent<DepositedEvent.InputTuple, DepositedEvent.OutputTuple, DepositedEvent.OutputObject>;
      Deposited: TypedContractEvent<DepositedEvent.InputTuple, DepositedEvent.OutputTuple, DepositedEvent.OutputObject>;
    

      'InterestDistributed(uint256,uint256)': TypedContractEvent<InterestDistributedEvent.InputTuple, InterestDistributedEvent.OutputTuple, InterestDistributedEvent.OutputObject>;
      InterestDistributed: TypedContractEvent<InterestDistributedEvent.InputTuple, InterestDistributedEvent.OutputTuple, InterestDistributedEvent.OutputObject>;
    

      'LoanDefaulted(uint256)': TypedContractEvent<LoanDefaultedEvent.InputTuple, LoanDefaultedEvent.OutputTuple, LoanDefaultedEvent.OutputObject>;
      LoanDefaulted: TypedContractEvent<LoanDefaultedEvent.InputTuple, LoanDefaultedEvent.OutputTuple, LoanDefaultedEvent.OutputObject>;
    

      'LoanOriginated(uint256,address,uint256,uint256)': TypedContractEvent<LoanOriginatedEvent.InputTuple, LoanOriginatedEvent.OutputTuple, LoanOriginatedEvent.OutputObject>;
      LoanOriginated: TypedContractEvent<LoanOriginatedEvent.InputTuple, LoanOriginatedEvent.OutputTuple, LoanOriginatedEvent.OutputObject>;
    

      'LoanRepaid(uint256,uint256)': TypedContractEvent<LoanRepaidEvent.InputTuple, LoanRepaidEvent.OutputTuple, LoanRepaidEvent.OutputObject>;
      LoanRepaid: TypedContractEvent<LoanRepaidEvent.InputTuple, LoanRepaidEvent.OutputTuple, LoanRepaidEvent.OutputObject>;
    

      'Withdrawn(address,uint256,bool,uint256)': TypedContractEvent<WithdrawnEvent.InputTuple, WithdrawnEvent.OutputTuple, WithdrawnEvent.OutputObject>;
      Withdrawn: TypedContractEvent<WithdrawnEvent.InputTuple, WithdrawnEvent.OutputTuple, WithdrawnEvent.OutputObject>;
    
    };
  }