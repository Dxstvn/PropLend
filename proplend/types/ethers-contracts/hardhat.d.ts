/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */


import { ethers } from 'ethers'
import { DeployContractOptions, FactoryOptions, HardhatEthersHelpers as HardhatEthersHelpersBase} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from "./index.js";

declare module "@nomicfoundation/hardhat-ethers/types" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
  getContractFactory(name: 'InterestDistributor', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.InterestDistributor__factory>
getContractFactory(name: 'LendingPool', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.LendingPool__factory>
getContractFactory(name: 'SecondaryMarket', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.SecondaryMarket__factory>
getContractFactory(name: 'TrancheToken', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.TrancheToken__factory>
getContractFactory(name: 'ILendingPool', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.ILendingPool__factory>
getContractFactory(name: 'ISecondaryMarket', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.ISecondaryMarket__factory>
getContractFactory(name: 'MockProperty', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.MockProperty__factory>
getContractFactory(name: 'MockUSDC', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.MockUSDC__factory>

  getContractAt(name: 'InterestDistributor', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.InterestDistributor>
getContractAt(name: 'LendingPool', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.LendingPool>
getContractAt(name: 'SecondaryMarket', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.SecondaryMarket>
getContractAt(name: 'TrancheToken', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.TrancheToken>
getContractAt(name: 'ILendingPool', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.ILendingPool>
getContractAt(name: 'ISecondaryMarket', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.ISecondaryMarket>
getContractAt(name: 'MockProperty', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.MockProperty>
getContractAt(name: 'MockUSDC', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.MockUSDC>

  deployContract(name: 'InterestDistributor', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.InterestDistributor>
deployContract(name: 'LendingPool', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.LendingPool>
deployContract(name: 'SecondaryMarket', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.SecondaryMarket>
deployContract(name: 'TrancheToken', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.TrancheToken>
deployContract(name: 'ILendingPool', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ILendingPool>
deployContract(name: 'ISecondaryMarket', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ISecondaryMarket>
deployContract(name: 'MockProperty', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockProperty>
deployContract(name: 'MockUSDC', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockUSDC>

  deployContract(name: 'InterestDistributor', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.InterestDistributor>
deployContract(name: 'LendingPool', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.LendingPool>
deployContract(name: 'SecondaryMarket', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.SecondaryMarket>
deployContract(name: 'TrancheToken', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.TrancheToken>
deployContract(name: 'ILendingPool', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ILendingPool>
deployContract(name: 'ISecondaryMarket', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ISecondaryMarket>
deployContract(name: 'MockProperty', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockProperty>
deployContract(name: 'MockUSDC', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MockUSDC>

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
  