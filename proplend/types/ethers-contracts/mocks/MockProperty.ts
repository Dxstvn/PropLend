/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface MockPropertyInterface extends Interface {
    getFunction(nameOrSignature: "createPropertyId" | "getPropertyValue" | "isPropertyRegistered" | "propertyOwners" | "propertyValues" | "registerProperty" | "updatePropertyValue"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "PropertyRegistered" | "PropertyValueUpdated"): EventFragment;

    encodeFunctionData(functionFragment: 'createPropertyId', values: [string]): string;
encodeFunctionData(functionFragment: 'getPropertyValue', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'isPropertyRegistered', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'propertyOwners', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'propertyValues', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'registerProperty', values: [BytesLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'updatePropertyValue', values: [BytesLike, BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'createPropertyId', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getPropertyValue', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isPropertyRegistered', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'propertyOwners', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'propertyValues', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'registerProperty', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updatePropertyValue', data: BytesLike): Result;
  }

  
    export namespace PropertyRegisteredEvent {
      export type InputTuple = [propertyId: BytesLike, owner: AddressLike, value: BigNumberish];
      export type OutputTuple = [propertyId: string, owner: string, value: bigint];
      export interface OutputObject {propertyId: string, owner: string, value: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PropertyValueUpdatedEvent {
      export type InputTuple = [propertyId: BytesLike, oldValue: BigNumberish, newValue: BigNumberish];
      export type OutputTuple = [propertyId: string, oldValue: bigint, newValue: bigint];
      export interface OutputObject {propertyId: string, oldValue: bigint, newValue: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface MockProperty extends BaseContract {
    
    connect(runner?: ContractRunner | null): MockProperty;
    waitForDeployment(): Promise<this>;

    interface: MockPropertyInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    createPropertyId: TypedContractMethod<
      [propertyAddress: string, ],
      [string],
      'view'
    >
    

    
    getPropertyValue: TypedContractMethod<
      [propertyId: BytesLike, ],
      [bigint],
      'view'
    >
    

    
    isPropertyRegistered: TypedContractMethod<
      [propertyId: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    propertyOwners: TypedContractMethod<
      [arg0: BytesLike, ],
      [string],
      'view'
    >
    

    
    propertyValues: TypedContractMethod<
      [arg0: BytesLike, ],
      [bigint],
      'view'
    >
    

    
    registerProperty: TypedContractMethod<
      [propertyId: BytesLike, owner: AddressLike, value: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    updatePropertyValue: TypedContractMethod<
      [propertyId: BytesLike, newValue: BigNumberish, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'createPropertyId'): TypedContractMethod<
      [propertyAddress: string, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getPropertyValue'): TypedContractMethod<
      [propertyId: BytesLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'isPropertyRegistered'): TypedContractMethod<
      [propertyId: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'propertyOwners'): TypedContractMethod<
      [arg0: BytesLike, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'propertyValues'): TypedContractMethod<
      [arg0: BytesLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'registerProperty'): TypedContractMethod<
      [propertyId: BytesLike, owner: AddressLike, value: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'updatePropertyValue'): TypedContractMethod<
      [propertyId: BytesLike, newValue: BigNumberish, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'PropertyRegistered'): TypedContractEvent<PropertyRegisteredEvent.InputTuple, PropertyRegisteredEvent.OutputTuple, PropertyRegisteredEvent.OutputObject>;
getEvent(key: 'PropertyValueUpdated'): TypedContractEvent<PropertyValueUpdatedEvent.InputTuple, PropertyValueUpdatedEvent.OutputTuple, PropertyValueUpdatedEvent.OutputObject>;

    filters: {
      
      'PropertyRegistered(bytes32,address,uint256)': TypedContractEvent<PropertyRegisteredEvent.InputTuple, PropertyRegisteredEvent.OutputTuple, PropertyRegisteredEvent.OutputObject>;
      PropertyRegistered: TypedContractEvent<PropertyRegisteredEvent.InputTuple, PropertyRegisteredEvent.OutputTuple, PropertyRegisteredEvent.OutputObject>;
    

      'PropertyValueUpdated(bytes32,uint256,uint256)': TypedContractEvent<PropertyValueUpdatedEvent.InputTuple, PropertyValueUpdatedEvent.OutputTuple, PropertyValueUpdatedEvent.OutputObject>;
      PropertyValueUpdated: TypedContractEvent<PropertyValueUpdatedEvent.InputTuple, PropertyValueUpdatedEvent.OutputTuple, PropertyValueUpdatedEvent.OutputObject>;
    
    };
  }