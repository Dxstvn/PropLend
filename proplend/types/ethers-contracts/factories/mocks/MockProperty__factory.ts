/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Addressable } from "ethers";
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers"
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers"
import type { NonPayableOverrides } from "../../common.js"
  import type { MockProperty, MockPropertyInterface } from "../../mocks/MockProperty.js";

  const _abi = [
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "internalType": "bytes32",
        "name": "propertyId",
        "type": "bytes32"
      },
      {
        "indexed": true,
        "internalType": "address",
        "name": "owner",
        "type": "address"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "value",
        "type": "uint256"
      }
    ],
    "name": "PropertyRegistered",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "internalType": "bytes32",
        "name": "propertyId",
        "type": "bytes32"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "oldValue",
        "type": "uint256"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "newValue",
        "type": "uint256"
      }
    ],
    "name": "PropertyValueUpdated",
    "type": "event"
  },
  {
    "inputs": [
      {
        "internalType": "string",
        "name": "propertyAddress",
        "type": "string"
      }
    ],
    "name": "createPropertyId",
    "outputs": [
      {
        "internalType": "bytes32",
        "name": "",
        "type": "bytes32"
      }
    ],
    "stateMutability": "pure",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "bytes32",
        "name": "propertyId",
        "type": "bytes32"
      }
    ],
    "name": "getPropertyValue",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "bytes32",
        "name": "propertyId",
        "type": "bytes32"
      }
    ],
    "name": "isPropertyRegistered",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "bytes32",
        "name": "",
        "type": "bytes32"
      }
    ],
    "name": "propertyOwners",
    "outputs": [
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "bytes32",
        "name": "",
        "type": "bytes32"
      }
    ],
    "name": "propertyValues",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "bytes32",
        "name": "propertyId",
        "type": "bytes32"
      },
      {
        "internalType": "address",
        "name": "owner",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "value",
        "type": "uint256"
      }
    ],
    "name": "registerProperty",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "bytes32",
        "name": "propertyId",
        "type": "bytes32"
      },
      {
        "internalType": "uint256",
        "name": "newValue",
        "type": "uint256"
      }
    ],
    "name": "updatePropertyValue",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }
] as const;

  const _bytecode = "0x608060405234801561000f575f80fd5b506105408061001d5f395ff3fe608060405234801561000f575f80fd5b506004361061007a575f3560e01c80637b7614d8116100585780637b7614d8146100d8578063af1cd25e146100eb578063d6ab0cd31461012b578063df3cbd8c1461015c575f80fd5b806343dad44a1461007e5780634b99acd2146100b05780636b7c551a146100c5575b5f80fd5b61009d61008c366004610418565b5f6020819052908152604090205481565b6040519081526020015b60405180910390f35b6100c36100be36600461042f565b61016f565b005b61009d6100d3366004610418565b61028a565b6100c36100e636600461046f565b6102f0565b6101136100f9366004610418565b60016020525f90815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016100a7565b61014c610139366004610418565b5f90815260208190526040902054151590565b60405190151581526020016100a7565b61009d61016a36600461048f565b6103e6565b5f83815260208190526040902054156101cf5760405162461bcd60e51b815260206004820152601b60248201527f50726f706572747920616c72656164792072656769737465726564000000000060448201526064015b60405180910390fd5b5f811161021e5760405162461bcd60e51b815260206004820152601c60248201527f56616c7565206d7573742062652067726561746572207468616e20300000000060448201526064016101c6565b5f83815260208181526040808320849055600182529182902080546001600160a01b0319166001600160a01b038616908117909155915183815285917fea1245422e61f969c47c964ccaa21fb8a4aa85f4f91c63df904ac5c9db79c19f910160405180910390a3505050565b5f818152602081905260408120546102de5760405162461bcd60e51b8152602060048201526017602482015276141c9bdc195c9d1e481b9bdd081c9959da5cdd195c9959604a1b60448201526064016101c6565b505f9081526020819052604090205490565b5f828152602081905260409020546103445760405162461bcd60e51b8152602060048201526017602482015276141c9bdc195c9d1e481b9bdd081c9959da5cdd195c9959604a1b60448201526064016101c6565b5f81116103935760405162461bcd60e51b815260206004820152601c60248201527f56616c7565206d7573742062652067726561746572207468616e20300000000060448201526064016101c6565b5f828152602081815260409182902080549084905582518181529182018490529184917f4853a99d780a6ac8e692539efe3c2c6b3de141c1d9a464702f1d040608163b89910160405180910390a2505050565b5f82826040516020016103fa9291906104fb565b60405160208183030381529060405280519060200120905092915050565b5f60208284031215610428575f80fd5b5035919050565b5f805f60608486031215610441575f80fd5b8335925060208401356001600160a01b038116811461045e575f80fd5b929592945050506040919091013590565b5f8060408385031215610480575f80fd5b50508035926020909101359150565b5f80602083850312156104a0575f80fd5b823567ffffffffffffffff808211156104b7575f80fd5b818501915085601f8301126104ca575f80fd5b8135818111156104d8575f80fd5b8660208285010111156104e9575f80fd5b60209290920196919550909350505050565b818382375f910190815291905056fea2646970667358221220cc4f19a836ec9622f2473e4f46b90cefcab05a5322dcaa533bdd2127b9a4b4db64736f6c63430008180033";

  
      type MockPropertyConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

      const isSuperArgs = (xs: MockPropertyConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
        xs.length > 1
    

  export class MockProperty__factory extends ContractFactory {
    
      constructor(...args: MockPropertyConstructorParams) {
        if (isSuperArgs(args)) {
          super(...args);
        } else {
          super(_abi, _bytecode, args[0]);
        }
        
      }
    
    override getDeployTransaction(overrides?: NonPayableOverrides & { from?: string }): Promise<ContractDeployTransaction> {
      return super.getDeployTransaction(overrides || {});
    };
    override deploy(overrides?: NonPayableOverrides & { from?: string }) {
      return super.deploy(overrides || {}) as Promise<MockProperty & {
        deploymentTransaction(): ContractTransactionResponse;
      }>;
    }
    override connect(runner: ContractRunner | null): MockProperty__factory {
      return super.connect(runner) as MockProperty__factory;
    }
    
    
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): MockPropertyInterface {
      return new Interface(_abi) as MockPropertyInterface;
    }
    
    override attach(address: string | Addressable): MockProperty {
      return super.attach(address) as MockProperty;
    }
  static connect(address: string, runner?: ContractRunner | null): MockProperty {
      return new Contract(address, _abi, runner) as unknown as MockProperty;
    }
  }

  
  