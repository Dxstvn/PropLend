/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  
export declare namespace ISecondaryMarket {
      
    export type OrderStruct = {trader: AddressLike, orderType: BigNumberish, isSenior: boolean, amount: BigNumberish, price: BigNumberish, timestamp: BigNumberish, isActive: boolean}

    export type OrderStructOutput = [trader: string, orderType: bigint, isSenior: boolean, amount: bigint, price: bigint, timestamp: bigint, isActive: boolean] & {trader: string, orderType: bigint, isSenior: boolean, amount: bigint, price: bigint, timestamp: bigint, isActive: boolean }
  
    }

  export interface SecondaryMarketInterface extends Interface {
    getFunction(nameOrSignature: "BPS_DIVISOR" | "DEFAULT_ADMIN_ROLE" | "OPERATOR_ROLE" | "TRADING_FEE_BPS" | "activeOrderIds" | "cancelOrder" | "createOrder" | "fillOrder" | "getActiveOrders" | "getMarketStats" | "getOrder" | "getRoleAdmin" | "getUserOrders" | "grantRole" | "hasRole" | "juniorToken" | "nextOrderId" | "orders" | "platformTreasury" | "renounceRole" | "revokeRole" | "seniorToken" | "setTrancheTokens" | "supportsInterface" | "totalFees" | "totalVolume" | "usdc"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "OrderCancelled" | "OrderCreated" | "OrderFilled" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked"): EventFragment;

    encodeFunctionData(functionFragment: 'BPS_DIVISOR', values?: undefined): string;
encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'OPERATOR_ROLE', values?: undefined): string;
encodeFunctionData(functionFragment: 'TRADING_FEE_BPS', values?: undefined): string;
encodeFunctionData(functionFragment: 'activeOrderIds', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'cancelOrder', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'createOrder', values: [BigNumberish, boolean, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'fillOrder', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'getActiveOrders', values: [boolean]): string;
encodeFunctionData(functionFragment: 'getMarketStats', values?: undefined): string;
encodeFunctionData(functionFragment: 'getOrder', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'getUserOrders', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'juniorToken', values?: undefined): string;
encodeFunctionData(functionFragment: 'nextOrderId', values?: undefined): string;
encodeFunctionData(functionFragment: 'orders', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'platformTreasury', values?: undefined): string;
encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'seniorToken', values?: undefined): string;
encodeFunctionData(functionFragment: 'setTrancheTokens', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'totalFees', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalVolume', values?: undefined): string;
encodeFunctionData(functionFragment: 'usdc', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'BPS_DIVISOR', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'OPERATOR_ROLE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'TRADING_FEE_BPS', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'activeOrderIds', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'cancelOrder', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createOrder', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'fillOrder', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getActiveOrders', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getMarketStats', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getOrder', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getUserOrders', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'juniorToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'nextOrderId', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'orders', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'platformTreasury', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'seniorToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setTrancheTokens', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalFees', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalVolume', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'usdc', data: BytesLike): Result;
  }

  
    export namespace OrderCancelledEvent {
      export type InputTuple = [orderId: BigNumberish];
      export type OutputTuple = [orderId: bigint];
      export interface OutputObject {orderId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OrderCreatedEvent {
      export type InputTuple = [orderId: BigNumberish, trader: AddressLike, orderType: BigNumberish, isSenior: boolean, amount: BigNumberish, price: BigNumberish];
      export type OutputTuple = [orderId: bigint, trader: string, orderType: bigint, isSenior: boolean, amount: bigint, price: bigint];
      export interface OutputObject {orderId: bigint, trader: string, orderType: bigint, isSenior: boolean, amount: bigint, price: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OrderFilledEvent {
      export type InputTuple = [orderId: BigNumberish, buyer: AddressLike, seller: AddressLike, amount: BigNumberish, price: BigNumberish];
      export type OutputTuple = [orderId: bigint, buyer: string, seller: string, amount: bigint, price: bigint];
      export interface OutputObject {orderId: bigint, buyer: string, seller: string, amount: bigint, price: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleAdminChangedEvent {
      export type InputTuple = [role: BytesLike, previousAdminRole: BytesLike, newAdminRole: BytesLike];
      export type OutputTuple = [role: string, previousAdminRole: string, newAdminRole: string];
      export interface OutputObject {role: string, previousAdminRole: string, newAdminRole: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleGrantedEvent {
      export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
      export type OutputTuple = [role: string, account: string, sender: string];
      export interface OutputObject {role: string, account: string, sender: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RoleRevokedEvent {
      export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
      export type OutputTuple = [role: string, account: string, sender: string];
      export interface OutputObject {role: string, account: string, sender: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface SecondaryMarket extends BaseContract {
    
    connect(runner?: ContractRunner | null): SecondaryMarket;
    waitForDeployment(): Promise<this>;

    interface: SecondaryMarketInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    BPS_DIVISOR: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    DEFAULT_ADMIN_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    OPERATOR_ROLE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    TRADING_FEE_BPS: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    activeOrderIds: TypedContractMethod<
      [arg0: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    cancelOrder: TypedContractMethod<
      [orderId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    createOrder: TypedContractMethod<
      [orderType: BigNumberish, isSenior: boolean, amount: BigNumberish, price: BigNumberish, ],
      [bigint],
      'nonpayable'
    >
    

    
    fillOrder: TypedContractMethod<
      [orderId: BigNumberish, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    getActiveOrders: TypedContractMethod<
      [isSenior: boolean, ],
      [ISecondaryMarket.OrderStructOutput[]],
      'view'
    >
    

    
    getMarketStats: TypedContractMethod<
      [],
      [[bigint, bigint, bigint] & {volume: bigint, fees: bigint, activeOrders: bigint }],
      'view'
    >
    

    
    getOrder: TypedContractMethod<
      [orderId: BigNumberish, ],
      [ISecondaryMarket.OrderStructOutput],
      'view'
    >
    

    
    getRoleAdmin: TypedContractMethod<
      [role: BytesLike, ],
      [string],
      'view'
    >
    

    
    getUserOrders: TypedContractMethod<
      [user: AddressLike, ],
      [ISecondaryMarket.OrderStructOutput[]],
      'view'
    >
    

    
    grantRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    hasRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    juniorToken: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    nextOrderId: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    orders: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, bigint, boolean, bigint, bigint, bigint, boolean] & {trader: string, orderType: bigint, isSenior: boolean, amount: bigint, price: bigint, timestamp: bigint, isActive: boolean }],
      'view'
    >
    

    
    platformTreasury: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    renounceRole: TypedContractMethod<
      [role: BytesLike, callerConfirmation: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    revokeRole: TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    seniorToken: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    setTrancheTokens: TypedContractMethod<
      [_seniorToken: AddressLike, _juniorToken: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    supportsInterface: TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    totalFees: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    totalVolume: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    usdc: TypedContractMethod<
      [],
      [string],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'BPS_DIVISOR'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'DEFAULT_ADMIN_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'OPERATOR_ROLE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'TRADING_FEE_BPS'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'activeOrderIds'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'cancelOrder'): TypedContractMethod<
      [orderId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'createOrder'): TypedContractMethod<
      [orderType: BigNumberish, isSenior: boolean, amount: BigNumberish, price: BigNumberish, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'fillOrder'): TypedContractMethod<
      [orderId: BigNumberish, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getActiveOrders'): TypedContractMethod<
      [isSenior: boolean, ],
      [ISecondaryMarket.OrderStructOutput[]],
      'view'
    >;
getFunction(nameOrSignature: 'getMarketStats'): TypedContractMethod<
      [],
      [[bigint, bigint, bigint] & {volume: bigint, fees: bigint, activeOrders: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'getOrder'): TypedContractMethod<
      [orderId: BigNumberish, ],
      [ISecondaryMarket.OrderStructOutput],
      'view'
    >;
getFunction(nameOrSignature: 'getRoleAdmin'): TypedContractMethod<
      [role: BytesLike, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getUserOrders'): TypedContractMethod<
      [user: AddressLike, ],
      [ISecondaryMarket.OrderStructOutput[]],
      'view'
    >;
getFunction(nameOrSignature: 'grantRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'hasRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'juniorToken'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'nextOrderId'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'orders'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, bigint, boolean, bigint, bigint, bigint, boolean] & {trader: string, orderType: bigint, isSenior: boolean, amount: bigint, price: bigint, timestamp: bigint, isActive: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'platformTreasury'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'renounceRole'): TypedContractMethod<
      [role: BytesLike, callerConfirmation: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'revokeRole'): TypedContractMethod<
      [role: BytesLike, account: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'seniorToken'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'setTrancheTokens'): TypedContractMethod<
      [_seniorToken: AddressLike, _juniorToken: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'supportsInterface'): TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'totalFees'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'totalVolume'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'usdc'): TypedContractMethod<
      [],
      [string],
      'view'
    >;

    getEvent(key: 'OrderCancelled'): TypedContractEvent<OrderCancelledEvent.InputTuple, OrderCancelledEvent.OutputTuple, OrderCancelledEvent.OutputObject>;
getEvent(key: 'OrderCreated'): TypedContractEvent<OrderCreatedEvent.InputTuple, OrderCreatedEvent.OutputTuple, OrderCreatedEvent.OutputObject>;
getEvent(key: 'OrderFilled'): TypedContractEvent<OrderFilledEvent.InputTuple, OrderFilledEvent.OutputTuple, OrderFilledEvent.OutputObject>;
getEvent(key: 'RoleAdminChanged'): TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
getEvent(key: 'RoleGranted'): TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
getEvent(key: 'RoleRevoked'): TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;

    filters: {
      
      'OrderCancelled(uint256)': TypedContractEvent<OrderCancelledEvent.InputTuple, OrderCancelledEvent.OutputTuple, OrderCancelledEvent.OutputObject>;
      OrderCancelled: TypedContractEvent<OrderCancelledEvent.InputTuple, OrderCancelledEvent.OutputTuple, OrderCancelledEvent.OutputObject>;
    

      'OrderCreated(uint256,address,uint8,bool,uint256,uint256)': TypedContractEvent<OrderCreatedEvent.InputTuple, OrderCreatedEvent.OutputTuple, OrderCreatedEvent.OutputObject>;
      OrderCreated: TypedContractEvent<OrderCreatedEvent.InputTuple, OrderCreatedEvent.OutputTuple, OrderCreatedEvent.OutputObject>;
    

      'OrderFilled(uint256,address,address,uint256,uint256)': TypedContractEvent<OrderFilledEvent.InputTuple, OrderFilledEvent.OutputTuple, OrderFilledEvent.OutputObject>;
      OrderFilled: TypedContractEvent<OrderFilledEvent.InputTuple, OrderFilledEvent.OutputTuple, OrderFilledEvent.OutputObject>;
    

      'RoleAdminChanged(bytes32,bytes32,bytes32)': TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
      RoleAdminChanged: TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
    

      'RoleGranted(bytes32,address,address)': TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
      RoleGranted: TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
    

      'RoleRevoked(bytes32,address,address)': TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
      RoleRevoked: TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
    
    };
  }